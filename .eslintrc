{
  "parser": "@typescript-eslint/parser",
  "env": {
    "browser": true,
    "es6": true
  },
  "parserOptions": {
    "project": "./tsconfig.json",
    "ecmaVersion": 2020,
    "sourceType": "module",
    "ecmaFeatures": {
      "jsx": true
    }
  },
  "settings": {
    "react": { "version": "detect" }
  },
  "plugins": [
    "@typescript-eslint",
    "eslint-plugin-import",
    "jest",
    "react-hooks",
    "react",
    "sonarjs"
  ],
  "extends": [
    "eslint:recommended",
    "plugin:@typescript-eslint/eslint-recommended",
    "plugin:@typescript-eslint/recommended-requiring-type-checking",
    "plugin:@typescript-eslint/recommended",
    "plugin:import/recommended",
    "plugin:import/typescript",

    "plugin:jest/recommended",
    "plugin:jsx-a11y/recommended",
    "plugin:react/jsx-runtime",
    "plugin:react/recommended",
    "plugin:sonarjs/recommended"
  ],
  "rules": {
    // basics
    "spaced-comment": ["warn", "always"],
    "constructor-super": "error",
    "no-restricted-syntax": [
      "error",
      "ForInStatement",
      {
        "selector": "TSEnumDeclaration",
        "message": "In modern TypeScript, you may not need an enum when an object with `as const` could suffice."
      }
    ],
    "no-console": ["error", { "allow": ["warn", "error"] }],
    "no-prototype-builtins": "error",

    // typescript-eslint
    "@typescript-eslint/prefer-ts-expect-error": "warn",
    "@typescript-eslint/unified-signatures": "warn",
    "@typescript-eslint/no-dynamic-delete": "warn",
    "@typescript-eslint/consistent-type-definitions": ["warn", "type"],

    "no-implied-eval": "off",
    "@typescript-eslint/no-implied-eval": ["error"],
    "no-unused-expressions": "off",
    "@typescript-eslint/no-unused-expressions": ["error"],
    "no-useless-constructor": "off",
    "@typescript-eslint/no-useless-constructor": ["error"],
    "no-invalid-this": "off",
    "@typescript-eslint/no-invalid-this": ["error"],
    "no-shadow": "off",
    "@typescript-eslint/no-shadow": ["error"],
    "no-return-await": "off",
    "@typescript-eslint/return-await": "error",
    "no-unused-vars": "off",
    "@typescript-eslint/no-unused-vars": [
      "error",
      {
        "args": "all",
        "ignoreRestSiblings": true,
        "vars": "all",
        "argsIgnorePattern": "^_",
        "destructuredArrayIgnorePattern": "^_"
      }
    ],
    "@typescript-eslint/no-namespace": [
      "error",
      { "allowDeclarations": true, "allowDefinitionFiles": true }
    ],
    "@typescript-eslint/restrict-template-expressions": [
      "error",
      {
        "allowNumber": true,
        "allowBoolean": true
      }
    ],
    "@typescript-eslint/array-type": "error",
    "@typescript-eslint/class-literal-property-style": "error",
    "dot-notation": "off",
    "@typescript-eslint/dot-notation": "error",
    "@typescript-eslint/no-base-to-string": "error",
    "@typescript-eslint/no-extraneous-class": "error",
    "@typescript-eslint/no-invalid-void-type": "error",
    "@typescript-eslint/no-meaningless-void-operator": "error",
    "@typescript-eslint/no-unnecessary-type-assertion": "error",
    "@typescript-eslint/no-non-null-asserted-nullish-coalescing": "error",
    "no-throw-literal": "off",
    "@typescript-eslint/no-throw-literal": "error",
    "@typescript-eslint/no-unnecessary-boolean-literal-compare": "error",
    "@typescript-eslint/no-unnecessary-type-arguments": "error",
    "@typescript-eslint/non-nullable-type-assertion-style": "error",
    "@typescript-eslint/prefer-for-of": "error",
    "@typescript-eslint/prefer-function-type": "error",
    "@typescript-eslint/prefer-includes": "error",
    "@typescript-eslint/prefer-nullish-coalescing": "error",
    "@typescript-eslint/prefer-optional-chain": "error",
    "@typescript-eslint/prefer-reduce-type-parameter": "error",
    "@typescript-eslint/prefer-return-this-type": "error",
    "@typescript-eslint/prefer-string-starts-ends-with": "error",
    "@typescript-eslint/no-unnecessary-condition": "error",
    "@typescript-eslint/no-non-null-assertion": "error",
    "@typescript-eslint/consistent-type-assertions": [
      "error",
      {
        "assertionStyle": "as",
        "objectLiteralTypeAssertions": "never"
      }
    ],
    "@typescript-eslint/explicit-function-return-type": [
      "error",
      {
        "allowExpressions": true,
        "allowTypedFunctionExpressions": true,
        "allowHigherOrderFunctions": true,
        "allowConciseArrowFunctionExpressionsStartingWithVoid": true
      }
    ],

    // imports
    "import/no-unresolved": "off", // check done by typescript
    "import/no-default-export": "warn",
    "import/order": [
      "warn",
      {
        "newlines-between": "always",
        "alphabetize": { "order": "asc", "caseInsensitive": true }
      }
    ],

    // sonar
    "sonarjs/elseif-without-else": "error",
    "sonarjs/no-inverted-boolean-check": "error",

    // react-hooks
    "react-hooks/rules-of-hooks": "error",
    "react-hooks/exhaustive-deps": "warn",

    // react
    "react/react-in-jsx-scope": "off",
    "react/prop-types": "off",
    "react/display-name": "warn",

    // jest
    "jest/valid-expect": "off"
  },
  "overrides": [
    // allow default export for configuration files
    {
      "files": ["*.[j|t]s"],
      "rules": {
        "import/no-default-export": "off"
      }
    },
    // ambient modules
    {
      "files": ["*.d.ts"],
      "rules": {
        "@typescript-eslint/consistent-type-definitions": "off",
        "@typescript-eslint/no-empty-interface": "off",
        "@typescript-eslint/no-unused-vars": "off"
      }
    },
    {
      "files": ["src/utils/*.ts"],
      "rules": {
        "@typescript-eslint/no-explicit-any": "off"
      }
    },
    {
      "files": ["**/**/*.spec.{ts,tsx}"],
      "rules": {
        // has to be disabled in order to use chai ie. `expect().to.be.true`
        "@typescript-eslint/no-unused-expressions": "off"
      }
    }
  ]
}
